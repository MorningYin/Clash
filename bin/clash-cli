#!/usr/bin/env bash
# Clash 轻量级交互控制台

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# 智能检测库文件目录（优先使用安装时设置的路径）
if [ -n "${LIB_DIR:-}" ] && [ -d "$LIB_DIR" ]; then
    # 使用安装时设置的 LIB_DIR
    :
elif [ -d "/usr/local/share/clash-installer/lib" ]; then
    # 使用标准安装路径
    LIB_DIR="/usr/local/share/clash-installer/lib"
elif [ -d "$PROJECT_DIR/lib" ]; then
    # 使用项目目录（开发模式）
    LIB_DIR="$PROJECT_DIR/lib"
else
    echo "错误: 找不到库文件目录" >&2
    exit 1
fi

# 加载共享库
source "$LIB_DIR/common.sh"
get_install_paths
init_logging
source "$LIB_DIR/manager.sh"

# ===== UI 辅助函数 =====
print_header() {
    clear 2>/dev/null || true
    echo -e "${BLUE}╔══════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║              Clash 控制中心                   ║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════╝${NC}"
    echo
}

status_summary() {
    local status_text
    if status_text=$(get_status); then
        echo -e "  当前状态 : ${GREEN}${status_text}${NC}"
    else
        echo -e "  当前状态 : ${RED}${status_text}${NC}"
    fi

    local http_port socks_port api_port
    http_port=$(get_config_value "install.http_port" "7890")
    socks_port=$(get_config_value "install.socks_port" "7891")
    api_port=$(get_config_value "install.api_port" "9090")

    echo -e "  HTTP 代理 : ${CYAN}http://127.0.0.1:${http_port}${NC}"
    echo -e "  SOCKS5 代理 : ${CYAN}socks5://127.0.0.1:${socks_port}${NC}"
    echo -e "  控制面板 : ${CYAN}http://127.0.0.1:${api_port}${NC}"

    echo
    echo -e "  端口状态 :"
    while IFS= read -r line; do
        line="${line//✓/${GREEN}✓${NC}}"
        line="${line//✗/${RED}✗${NC}}"
        echo "    ${line}"
    done < <(check_ports)
    echo
}

show_menu() {
    print_header
    status_summary
    cat <<'MENU'
  1. 启动代理
  2. 关闭代理
  3. 查看运行状态
  0. 退出
MENU
    echo -n "请选择操作 [0-3]: "
}

pause() {
    read -rp "按回车返回主菜单..." _
}

# ===== 功能封装 =====
# 启动 Clash 代理服务并配置系统级代理
# 功能:
#   - 启动 Clash 服务进程
#   - 配置系统级代理（影响所有终端和应用程序）
# 需要: root 权限
# 返回: 0 表示成功，1 表示失败
start_proxy() {
    # 检查 root 权限（系统级代理需要 root）
    if ! is_root; then
        error "启动全局代理需要 root 权限"
        error "请使用 sudo clash-cli start 或切换到 root 用户"
        return 1
    fi

    local started=true

    if ! start_service; then
        started=false
    fi

    if $started; then
        # 强制使用系统级代理（--system）以实现全局控制
        if ! proxy_on --system; then
            error "Clash 已启动，但未能配置系统级代理，请检查权限"
            started=false
        else
            success "全局代理已开启（系统级）"
        fi
    fi

    $started
}

# 停止 Clash 代理服务并完全恢复系统网络配置
# 功能:
#   - 停止 Clash 服务进程
#   - 清理所有系统级代理配置（确保完全恢复）
# 需要: root 权限
# 返回: 0 表示成功，1 表示失败
stop_proxy() {
    # 检查 root 权限（关闭系统级代理需要 root）
    if ! is_root; then
        error "关闭全局代理需要 root 权限"
        error "请使用 sudo clash-cli stop 或切换到 root 用户"
        return 1
    fi

    local ok=true

    # 先停止服务
    if ! stop_service; then
        ok=false
    fi

    # 强制使用系统级代理关闭（--system）以确保完全恢复
    if ! proxy_off --system; then
        warn "未能完全恢复系统代理配置，请手动检查"
        ok=false
    else
        success "全局代理已关闭，系统网络路径已完全恢复"
    fi

    $ok
}

# 显示 Clash 服务运行状态
# 功能:
#   - 显示服务状态（运行中/未运行）
#   - 显示代理端口信息
#   - 显示端口监听状态
show_status() {
    echo
    status_summary
}

# ===== 命令模式 =====
show_help() {
    cat <<'HELP'
Clash 控制中心

用法: clash-cli [命令]

命令:
  start      启动 Clash 并开启系统代理
  stop       停止 Clash 并恢复网络路径
  status     查看当前运行状态
  menu       打开交互式控制台 (默认)
  help       显示本帮助信息
HELP
}

handle_command() {
    local cmd="${1:-menu}"
    case "$cmd" in
        start)
            start_proxy
            ;;
        stop)
            stop_proxy
            ;;
        status)
            show_status
            ;;
        help|-h|--help)
            show_help
            ;;
        menu)
            return 1
            ;;
        *)
            error "未知命令: $cmd"
            echo
            show_help
            ;;
    esac

    exit 0
}

# 如果提供了命令，优先处理
if [ "$#" -gt 0 ]; then
    handle_command "$1" || true
fi

# ===== 交互式循环 =====
while true; do
    show_menu
    read -r choice
    echo
    case "$choice" in
        1)
            start_proxy
            pause
            ;;
        2)
            stop_proxy
            pause
            ;;
        3)
            show_status
            pause
            ;;
        0)
            echo -e "${GREEN}再见！${NC}"
            exit 0
            ;;
        *)
            warn "无效选择，请重新输入"
            pause
            ;;
    esac
    echo
done
